{"ast":null,"code":"import { useSyncExternalStore, useEvent } from \"./react-deps.js\";\nimport { absolutePath, relativePath } from \"./paths.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nvar eventPopstate = \"popstate\";\nvar eventPushState = \"pushState\";\nvar eventReplaceState = \"replaceState\";\nvar eventHashchange = \"hashchange\";\nexport var events = [eventPopstate, eventPushState, eventReplaceState, eventHashchange];\nvar subscribeToLocationUpdates = function subscribeToLocationUpdates(callback) {\n  for (var _i = 0, _events = events; _i < _events.length; _i++) {\n    var event = _events[_i];\n    addEventListener(event, callback);\n  }\n  return function () {\n    for (var _i2 = 0, _events2 = events; _i2 < _events2.length; _i2++) {\n      var _event = _events2[_i2];\n      removeEventListener(_event, callback);\n    }\n  };\n};\nexport var useLocationProperty = function useLocationProperty(fn, ssrFn) {\n  return useSyncExternalStore(subscribeToLocationUpdates, fn, ssrFn);\n};\nvar currentSearch = function currentSearch() {\n  return location.search;\n};\nexport var useSearch = function useSearch() {\n  return useLocationProperty(currentSearch);\n};\nvar currentPathname = function currentPathname() {\n  return location.pathname;\n};\nexport var usePathname = function usePathname() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    ssrPath = _ref.ssrPath;\n  return useLocationProperty(currentPathname, ssrPath ? function () {\n    return ssrPath;\n  } : currentPathname);\n};\nexport var navigate = function navigate(to) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$replace = _ref2.replace,\n    replace = _ref2$replace === void 0 ? false : _ref2$replace;\n  return history[replace ? eventReplaceState : eventPushState](null, \"\", to);\n};\n\n// the 2nd argument of the `useLocation` return value is a function\n// that allows to perform a navigation.\n//\n// the function reference should stay the same between re-renders, so that\n// it can be passed down as an element prop without any performance concerns.\n// (This is achieved via `useEvent`.)\nvar useLocation = function useLocation() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [relativePath(opts.base, usePathname(opts)), useEvent(function (to, navOpts) {\n    return navigate(absolutePath(to, opts.base), navOpts);\n  })];\n};\nexport default useLocation;\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  var _loop = function _loop() {\n    var type = _arr[_i3];\n    var original = history[type];\n    // TODO: we should be using unstable_batchedUpdates to avoid multiple re-renders,\n    // however that will require an additional peer dependency on react-dom.\n    // See: https://github.com/reactwg/react-18/discussions/86#discussioncomment-1567149\n    history[type] = function () {\n      var result = original.apply(this, arguments);\n      var event = new Event(type);\n      event.arguments = arguments;\n      dispatchEvent(event);\n      return result;\n    };\n  };\n  for (var _i3 = 0, _arr = [eventPushState, eventReplaceState]; _i3 < _arr.length; _i3++) {\n    _loop();\n  }\n}","map":{"version":3,"names":["useSyncExternalStore","useEvent","absolutePath","relativePath","eventPopstate","eventPushState","eventReplaceState","eventHashchange","events","subscribeToLocationUpdates","callback","_i","_events","length","event","addEventListener","_i2","_events2","removeEventListener","useLocationProperty","fn","ssrFn","currentSearch","location","search","useSearch","currentPathname","pathname","usePathname","_ref","arguments","undefined","ssrPath","navigate","to","_ref2","_ref2$replace","replace","history","useLocation","opts","base","navOpts","_loop","type","_arr","_i3","original","result","apply","Event","dispatchEvent"],"sources":["C:/Users/shubh/OneDrive/Desktop/radio with backend/frontend/node_modules/wouter/use-location.js"],"sourcesContent":["import { useSyncExternalStore, useEvent } from \"./react-deps.js\";\nimport { absolutePath, relativePath } from \"./paths.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nconst eventPopstate = \"popstate\";\nconst eventPushState = \"pushState\";\nconst eventReplaceState = \"replaceState\";\nconst eventHashchange = \"hashchange\";\nexport const events = [\n  eventPopstate,\n  eventPushState,\n  eventReplaceState,\n  eventHashchange,\n];\n\nconst subscribeToLocationUpdates = (callback) => {\n  for (const event of events) {\n    addEventListener(event, callback);\n  }\n  return () => {\n    for (const event of events) {\n      removeEventListener(event, callback);\n    }\n  };\n};\n\nexport const useLocationProperty = (fn, ssrFn) =>\n  useSyncExternalStore(subscribeToLocationUpdates, fn, ssrFn);\n\nconst currentSearch = () => location.search;\nexport const useSearch = () => useLocationProperty(currentSearch);\n\nconst currentPathname = () => location.pathname;\n\nexport const usePathname = ({ ssrPath } = {}) =>\n  useLocationProperty(\n    currentPathname,\n    ssrPath ? () => ssrPath : currentPathname\n  );\n\nexport const navigate = (to, { replace = false } = {}) =>\n  history[replace ? eventReplaceState : eventPushState](null, \"\", to);\n\n// the 2nd argument of the `useLocation` return value is a function\n// that allows to perform a navigation.\n//\n// the function reference should stay the same between re-renders, so that\n// it can be passed down as an element prop without any performance concerns.\n// (This is achieved via `useEvent`.)\nconst useLocation = (opts = {}) => [\n  relativePath(opts.base, usePathname(opts)),\n  useEvent((to, navOpts) => navigate(absolutePath(to, opts.base), navOpts)),\n];\n\nexport default useLocation;\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  for (const type of [eventPushState, eventReplaceState]) {\n    const original = history[type];\n    // TODO: we should be using unstable_batchedUpdates to avoid multiple re-renders,\n    // however that will require an additional peer dependency on react-dom.\n    // See: https://github.com/reactwg/react-18/discussions/86#discussioncomment-1567149\n    history[type] = function () {\n      const result = original.apply(this, arguments);\n      const event = new Event(type);\n      event.arguments = arguments;\n\n      dispatchEvent(event);\n      return result;\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}